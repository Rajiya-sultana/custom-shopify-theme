
  <style>
    .embla {
  max-width: 70rem;
  margin: auto;
  --slide-height: 30rem; 
  --slide-spacing: 1.5rem; 
  --slide-size: 100%;
  --slide-spacing-sm: 2rem;
  --slide-size-sm: 50%;
  --slide-spacing-lg: 2.5rem;
  --slide-size-lg: calc(100% / 3);
}

.embla__viewport {
  overflow: hidden;
}

.embla__container {
  backface-visibility: hidden;
  display: flex;
  touch-action: pan-y pinch-zoom;
  margin-left: calc(var(--slide-spacing) * -1);
}

@media (min-width: 750px) {
  .embla__container {
    margin-left: calc(var(--slide-spacing-sm) * -1);
  }
}

@media (min-width: 1200px) {
  .embla__container {
    margin-left: calc(var(--slide-spacing-lg) * -1);
  }
}

.embla__slide {
  flex: 0 0 var(--slide-size);
  padding-left: var(--slide-spacing);
}

@media (min-width: 750px) {
  .embla__slide {
    flex: 0 0 var(--slide-size-sm);
    padding-left: var(--slide-spacing-sm);
  }
}

@media (min-width: 1200px) {
  .embla__slide {
    flex: 0 0 var(--slide-size-lg);
    padding-left: var(--slide-spacing-lg);
  }
}

/* Video Styling */
.embla__slide video {
  width: 100%;
  height: var(--slide-height);
  object-fit: cover;
  border-radius: 8px;
}

.embla__controls {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 1.5rem;
}

.embla__buttons {
  display: flex;
  gap: 0.6rem;
}

.embla__button {
  -webkit-tap-highlight-color: rgba(var(--text-high-contrast-rgb-value), 0.5);
  appearance: none;
  background-color: transparent;
  touch-action: manipulation;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  border: none;
  padding: 0;
  width: 3.6rem;
  height: 3.6rem;
  border-radius: 50%;
  box-shadow: inset 0 0 0 0.2rem var(--detail-medium-contrast);
  color: var(--text-body);
}

.embla__button:disabled {
  color: var(--detail-high-contrast);
}

.embla__button__svg {
  width: 35%;
  height: 35%;
}

.embla__dots {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 0.5rem;
}

.embla__dot {
  width: 10px;
  height: 10px;
  border-radius: 50%;
  background-color: #ccc;
  transition: background-color 0.3s;
  cursor: pointer;
}

.embla__dot--selected {
  background-color: #333;
}

.embla {
  position: relative;
  max-width: 70rem;
  margin: auto;
}

.embla__viewport {
  overflow: hidden;
  position: relative;
}

.embla__button {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background-color: rgba(0, 0, 0, 0.5);
  color: white;
  width: 3rem;
  height: 3rem;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 10;
}

/* Left and Right positioning */
.embla__button--prev {
  left: 0;
}

.embla__button--next {
  right: 0;
}

/* Center dots below the carousel */
.embla__dots {
  position: absolute;
  bottom: -2.5rem; /* Move dots below carousel */
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  gap: 0.5rem;
}


  </style>



    <section class="embla">
      <div class="embla__viewport">
        <div class="embla__container">
          {% for block in section.blocks %}
          <div class="embla__slide">
            {% if block.settings.carousel_vid != blank %}
              <video src="{{ block.settings.carousel_vid.sources[1].url }}"  playsinline autoplay ></video>
              
            {% endif %}
          </div>
        {% endfor %}
        </div>
      </div>

      <div class="embla__controls">
        <div class="embla__buttons">
          <button class="embla__button embla__button--prev" type="button">
           {% render 'prev-icon' %}
          </button>

          <button class="embla__button embla__button--next" type="button">
       {% render 'next-icon' %}
          </button>
        </div>

        <div class="embla__dots"></div>
      </div>
    </section>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const OPTIONS = { align: 'start' }
      const emblaNode = document.querySelector('.embla')
      const viewportNode = emblaNode.querySelector('.embla__viewport')
      const prevBtnNode = emblaNode.querySelector('.embla__button--prev')
      const nextBtnNode = emblaNode.querySelector('.embla__button--next')
      const dotsNode = emblaNode.querySelector('.embla__dots')

      const emblaApi = EmblaCarousel(viewportNode, OPTIONS)

      const addTogglePrevNextBtnsActive = (emblaApi, prevBtn, nextBtn) => {
        const togglePrevNextBtnsState = () => {
          prevBtn.disabled = !emblaApi.canScrollPrev()
          nextBtn.disabled = !emblaApi.canScrollNext()
        }

        emblaApi
          .on('select', togglePrevNextBtnsState)
          .on('init', togglePrevNextBtnsState)
          .on('reInit', togglePrevNextBtnsState)
      }

      const addPrevNextBtnsClickHandlers = (emblaApi, prevBtn, nextBtn) => {
        prevBtn.addEventListener('click', emblaApi.scrollPrev, false)
        nextBtn.addEventListener('click', emblaApi.scrollNext, false)
        addTogglePrevNextBtnsActive(emblaApi, prevBtn, nextBtn)
      }

      const addDotBtnsAndClickHandlers = (emblaApi, dotsNode) => {
        let dotNodes = []

        const addDotBtnsWithClickHandlers = () => {
          dotsNode.innerHTML = emblaApi
            .scrollSnapList()
            .map(() => '<button class="embla__dot" type="button"></button>')
            .join('')

          const scrollTo = (index) => {
            emblaApi.scrollTo(index)
          }

          dotNodes = Array.from(dotsNode.querySelectorAll('.embla__dot'))
          dotNodes.forEach((dotNode, index) => {
            dotNode.addEventListener('click', () => scrollTo(index), false)
          })
        }

        const toggleDotBtnsActive = () => {
          const previous = emblaApi.previousScrollSnap()
          const selected = emblaApi.selectedScrollSnap()
          dotNodes[previous]?.classList.remove('embla__dot--selected')
          dotNodes[selected]?.classList.add('embla__dot--selected')
        }

        emblaApi
          .on('init', addDotBtnsWithClickHandlers)
          .on('reInit', addDotBtnsWithClickHandlers)
          .on('select', toggleDotBtnsActive)
      }

      addPrevNextBtnsClickHandlers(emblaApi, prevBtnNode, nextBtnNode)
      addDotBtnsAndClickHandlers(emblaApi, dotsNode)
    })
  </script>





{% schema %}
  {
    "name": "Video Carousel",
    "settings": [],
    "blocks": [
      {
        "type": "carousel",
        "name": "Carousel Item",
        "settings": [
          {
            "type": "video",
            "id": "carousel_vid",
            "label": "Carousel Video"
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "Video Carousel",
        "category":"Section"
      }
    ]
  }
{% endschema %}